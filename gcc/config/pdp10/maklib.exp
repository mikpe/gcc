#!/usr/bin/expect

set ProgName "maklib.exp"
set tops20_login 0
set Host ""
set User ""
set Passwd ""
set Rcmd ""
set telnet_lib [file dirname $argv0]
append telnet_lib "/" "telnet_tops20.exp"
source $telnet_lib
set timeout 120

proc RemoteMaklib { rcmd } {
    global timeout ProgName

    set tries 0
    set result -1
    exp_send "\n"
    expect {
        -regex ".*\[@!\] $" {
            exp_send "$rcmd\n"
            set result 0
        }
        timeout {
            puts "$ProgName: Expect timed out while invoking maklib"
            if {[incr tries] < 3} {
                exp_send "\n"
                exp_continue
            }
	}
    }
    if { $result < 0 } {
        puts "$ProgName: Too many timeouts ($tries) invoking maklib"
        return 0
    }

    # Increase our patience substantially
    set timeout [expr $timeout * 6]
    set tries 0
    expect {
        -regex ".*(\[\[\]\]|\[^%\]MKL|\\?)+.*" {
            # Maklib error message(s).  Send Ctrl-C to vanquish maklib.
            exp_send "\003"
            set result 1
        }
        -regex "\\**(\[\r\n\]+\[^\r\n\]*\[!@\] )+$" {
            # Success == one or more `*' followed by one or more exec prompts
            set result 2
	}
        timeout {
            puts "$ProgName: Expect timed out while waiting for maklib"
            if {[incr tries] < 4} {
                exp_send "\n"
                exp_continue
            }
        }
    }
    
    if { $result == 1 } {
	# Maklib errors
        puts stderr "$ProgName: maklib errors"
        return 0
    }
    if { $result < 1 } {
	# timed out or error, kill whatever is running with ^c
        puts stderr "$ProgName: Too many timeouts ($tries) waiting for maklib"
	exp_send "\003"
        return 0
    }
    return 1
}


proc Usage { } {
    global ProgName
    puts stderr "usage: $ProgName host username password remote_command"
}


if { $argc != 4 } {
    puts stderr "$ProgName: wrong number of command line arguments"
    Usage
    exit 2
}

set ii 0
foreach arg $argv {
    set ii [expr $ii + 1]
    switch -exact -- $ii {
        1 { set Host $arg }
        2 { set User $arg }
        3 { set Passwd $arg }
        4 { set Rcmd $arg }
        default {
            puts stderr "$ProgName: error parsing command line arguments"
            exit 3
        }
    }
}

log_user 0
if { [login_tops20 "" $Host $User $Passwd] < 1 } {
    puts stderr "$ProgName: login to $Host as $User failed"
    exit 1
}

log_user 1
if ![RemoteMaklib $Rcmd] {
    puts stderr "$ProgName: maklib failed"
    log_user 0
    logout_tops20
    exit 1
}

log_user 0
logout_tops20

exit 0
